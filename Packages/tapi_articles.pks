-- TAPI_ARTICLES specification
CREATE OR REPLACE PACKAGE SIMPLE_DELIVERY.tapi_articles
IS
   /**
   * TAPI_ARTICLES
   * Generated by: tapiGen2 - DO NOT MODIFY!
   * Website: github.com/osalvador/tapiGen2
   * Created On: 19-JUL-2016 17:52
   * Created By: SIMPLE_DELIVERY
   */

   --Scalar/Column types
   SUBTYPE hash_t IS varchar2 (40);
   SUBTYPE article_id IS articles.article_id%TYPE;
   SUBTYPE name IS articles.name%TYPE;
   SUBTYPE description IS articles.description%TYPE;
   SUBTYPE stock IS articles.stock%TYPE;
   SUBTYPE price IS articles.price%TYPE;
   SUBTYPE picture IS articles.picture%TYPE;
   SUBTYPE shop_id IS articles.shop_id%TYPE;
   SUBTYPE brand_id IS articles.brand_id%TYPE;
   SUBTYPE article_type_id IS articles.article_type_id%TYPE;
   SUBTYPE state_id IS articles.state_id%TYPE;

   --Record type
   TYPE articles_rt
   IS
      RECORD (
            article_id articles.article_id%TYPE,
            name articles.name%TYPE,
            description articles.description%TYPE,
            stock articles.stock%TYPE,
            price articles.price%TYPE,
            picture articles.picture%TYPE,
            shop_id articles.shop_id%TYPE,
            brand_id articles.brand_id%TYPE,
            article_type_id articles.article_type_id%TYPE,
            state_id articles.state_id%TYPE,
            hash               hash_t,
            row_id            VARCHAR2(64)
      );
   --Collection types (record)
   TYPE articles_tt IS TABLE OF articles_rt;

   --Global exceptions
   e_ol_check_failed EXCEPTION; --Optimistic lock check failed
   e_row_missing     EXCEPTION; --The cursor failed to get a row
   e_upd_failed      EXCEPTION; --The update operation failed
   e_del_failed      EXCEPTION; --The delete operation failed

   /**
   * Generates a SHA1 hash for optimistic locking purposes.
   *
   * @param    p_article_id        must be NOT NULL
   */
   FUNCTION hash (
                  p_article_id IN articles.article_id%TYPE
                 )
    RETURN VARCHAR2;

   /**
   * This function generates a SHA1 hash for optimistic locking purposes.
   * Access directly to the row by rowid
   *
   * @param  p_rowid  must be NOT NULL
   */
   FUNCTION hash_rowid (p_rowid IN varchar2)
   RETURN varchar2;

   /**
   * This is a table encapsulation function designed to retrieve information from the articles table.
   *
   * @param      p_article_id      must be NOT NULL
   * @return     articles Record Type
   */
   FUNCTION rt (
                p_article_id IN articles.article_id%TYPE
               )
    RETURN articles_rt ;

   /**
   * This is a table encapsulation function designed to retrieve information
   * from the articles table while placing a lock on it for a potential
   * update/delete. Do not use this for updates in web based apps, instead use the
   * rt_for_web_update function to get a FOR_WEB_UPDATE_RT record which
   * includes all of the tables columns along with an md5 checksum for use in the
   * web_upd and web_del procedures.
   *
   * @param      p_article_id      must be NOT NULL
   * @return     articles Record Type
   */
   FUNCTION rt_for_update (
                          p_article_id IN articles.article_id%TYPE
                          )
    RETURN articles_rt ;

   /**
   * This is a table encapsulation function designed to retrieve information from the articles table.
   * This function return Record Table as PIPELINED Function
   *
   * @param      p_article_id      must be NOT NULL
   * @return     articles Table Record Type
   */
   FUNCTION tt (
                p_article_id IN articles.article_id%TYPE DEFAULT NULL
               )
   RETURN articles_tt
   PIPELINED;

   /**
   * This is a table encapsulation function designed to insert a row into the articles table.
   *
   * @param      p_articles_rec       Record Type
   * @return     p_articles_rec       Record Type
   */
   PROCEDURE ins (p_articles_rec IN OUT articles_rt);

   /**
   * This is a table encapsulation function designed to update a row in the articles table.
   *
   * @param      p_articles_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE upd (p_articles_rec IN articles_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to update a row in the articles table,
   * access directly to the row by rowid
   *
   * @param      p_articles_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE upd_rowid (p_articles_rec IN articles_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to update a row
   * in the articles table whith optimistic lock validation
   *
   * @param      p_articles_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE web_upd (p_articles_rec IN articles_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to update a row
   * in the articles table whith optimistic lock validation
   * access directly to the row by rowid
   *
   * @param      p_articles_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE web_upd_rowid (p_articles_rec IN articles_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to delete a row from the articles table.
   *
   * @param    p_article_id        must be NOT NULL
   */
   PROCEDURE del (
                  p_article_id IN articles.article_id%TYPE
                );

   /**
   * This is a table encapsulation function designed to delete a row from the articles table
   * access directly to the row by rowid
   *
   * @param      p_rowid      must be NOT NULL
   */
    PROCEDURE del_rowid (p_rowid IN VARCHAR2);

   /**
   * This is a table encapsulation function designed to delete a row from the articles table
   * whith optimistic lock validation
   *
   * @param      p_article_id      must be NOT NULL
   * @param      p_hash       must be NOT NULL
   */
    PROCEDURE web_del (
                      p_article_id IN articles.article_id%TYPE,
                      p_hash IN varchar2
                      );

   /**
   * This is a table encapsulation function designed to delete a row from the articles table
   * whith optimistic lock validation, access directly to the row by rowid
   *
   * @param      p_rowid      must be NOT NULL
   * @param      p_hash       must be NOT NULL
   */
    PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2);

END tapi_articles;
/
