create or replace PACKAGE BODY tapi_people IS

   /**
   * TAPI_PEOPLE
   * Generated by: tapiGen2 - DO NOT MODIFY!
   * Website: github.com/osalvador/tapiGen2
   * Created On: 20-JUL-2016 11:49
   * Created By: SIMPLE_DELIVERY
   */

    --Global logger scope
    gc_scope_prefix CONSTANT varchar2(31) := LOWER($$plsql_unit)||'.';

   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR people_cur (
                       p_person_id IN people.person_id%TYPE
                       )
   IS
      SELECT
            person_id,
            name,
            last_name,
            email,
            cellphone,
            tapi_people.hash(person_id),
            ROWID
      FROM people
      WHERE
           person_id = people_cur.p_person_id
      FOR UPDATE;

    --By Rowid
    CURSOR people_rowid_cur (p_rowid IN VARCHAR2)
    IS
      SELECT
             person_id,
             name,
             last_name,
             email,
             cellphone,
             tapi_people.hash(person_id),
             ROWID
      FROM people
      WHERE ROWID = p_rowid
      FOR UPDATE;


    FUNCTION hash (
                  p_person_id IN people.person_id%TYPE
                  )
      RETURN varchar2
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'hash';
      l_params logger.tab_param;
      l_retval hash_t;
      l_string CLOB;
      l_date_format VARCHAR2(64);
   BEGIN

      logger.append_param(l_params, 'p_person_id', p_person_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Getting row data into one string', l_scope);

     --Get actual NLS_DATE_FORMAT
     SELECT   VALUE
       INTO   l_date_format
       FROM   v$nls_parameters
      WHERE   parameter = 'NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            person_id||
            name||
            last_name||
            email||
            cellphone
      INTO l_string
      FROM people
      WHERE
           person_id = hash.p_person_id
           ;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      logger.LOG('Converting into SHA1 hash', l_scope);
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);
      logger.LOG('END', l_scope);

      RETURN l_retval;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END hash;

    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'hash_rowid';
      l_params logger.tab_param;
      l_retval hash_t;
      l_string CLOB;
      l_date_format varchar2(64);
   BEGIN
      logger.append_param(l_params, 'p_rowid', p_rowid);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Getting row data into one string', l_scope);

      --Get actual NLS_DATE_FORMAT
      SELECT VALUE INTO l_date_format  FROM v$nls_parameters WHERE parameter ='NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            person_id||
            name||
            last_name||
            email||
            cellphone
      INTO l_string
      FROM people
      WHERE  ROWID = hash_rowid.p_rowid;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      logger.LOG('Converting into SHA1 hash', l_scope);
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      logger.LOG('END', l_scope);
      RETURN l_retval;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END hash_rowid;

   FUNCTION rt (
               p_person_id IN people.person_id%TYPE
               )
      RETURN people_rt RESULT_CACHE
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'rt';
      l_params logger.tab_param;
      l_people_rec people_rt;
   BEGIN
      logger.append_param(l_params, 'p_person_id', p_person_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Populating record type from DB', l_scope);

      SELECT a.*,
             tapi_people.hash(person_id),
             rowid
      INTO l_people_rec
      FROM people a
      WHERE
           person_id = rt.p_person_id
           ;

      logger.LOG('END', l_scope);

      RETURN l_people_rec;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END rt;

   FUNCTION rt_for_update (
                          p_person_id IN people.person_id%TYPE
                          )
      RETURN people_rt RESULT_CACHE
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'rt_for_update';
      l_params logger.tab_param;
      l_people_rec people_rt;
   BEGIN

      logger.append_param(l_params, 'p_person_id', p_person_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Populating record type from DB', l_scope);

      SELECT a.*,
             tapi_people.hash(person_id),
             rowid
      INTO l_people_rec
      FROM people a
      WHERE
           person_id = rt_for_update.p_person_id
      FOR UPDATE;

      logger.LOG('END', l_scope);

      RETURN l_people_rec;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END rt_for_update;

    FUNCTION tt (
                p_person_id IN people.person_id%TYPE DEFAULT NULL
                )
       RETURN people_tt
       PIPELINED
    IS
       l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'tt';
       l_params logger.tab_param;
       l_people_rec   people_rt;
    BEGIN
      logger.append_param(l_params, 'p_person_id', tt.p_person_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Populating record type from DB', l_scope);

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   people a
                   WHERE
                        person_id = NVL(tt.p_person_id,person_id)
                        )
       LOOP
              l_people_rec.person_id := c1.person_id;
              l_people_rec.name := c1.name;
              l_people_rec.last_name := c1.last_name;
              l_people_rec.email := c1.email;
              l_people_rec.cellphone := c1.cellphone;
              l_people_rec.hash := tapi_people.hash( c1.person_id);
              l_people_rec.row_id := c1.ROWID;
              PIPE ROW (l_people_rec);
       END LOOP;

       logger.LOG('END', l_scope);

       RETURN;

    EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
    END tt;


    PROCEDURE ins (p_people_rec IN OUT people_rt)
    IS
        l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'ins';
        l_params logger.tab_param;
        l_rowtype     people%ROWTYPE;

    BEGIN
        logger.append_param(l_params, 'p_people_rec.person_id', ins.p_people_rec.person_id);
        logger.append_param(l_params, 'p_people_rec.name', ins.p_people_rec.name);
        logger.append_param(l_params, 'p_people_rec.last_name', ins.p_people_rec.last_name);
        logger.append_param(l_params, 'p_people_rec.email', ins.p_people_rec.email);
        logger.append_param(l_params, 'p_people_rec.cellphone', ins.p_people_rec.cellphone);
        logger.LOG('START', l_scope, NULL, l_params);
        logger.LOG('Inserting data', l_scope);


        l_rowtype.person_id := ins.p_people_rec.person_id;
        l_rowtype.name := ins.p_people_rec.name;
        l_rowtype.last_name := ins.p_people_rec.last_name;
        l_rowtype.email := ins.p_people_rec.email;
        l_rowtype.cellphone := ins.p_people_rec.cellphone;

       INSERT INTO people
         VALUES   l_rowtype;

       logger.LOG('END', l_scope);

    EXCEPTION
      WHEN OTHERS
      THEN
         logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
         RAISE;
    END ins;

    PROCEDURE upd (
                  p_people_rec         IN people_rt,
                  p_ignore_nulls         IN boolean := FALSE
                  )
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'upd';
      l_params logger.tab_param;
    BEGIN
       logger.append_param(l_params, 'p_people_rec.person_id', upd.p_people_rec.person_id);
       logger.append_param(l_params, 'p_people_rec.name', upd.p_people_rec.name);
       logger.append_param(l_params, 'p_people_rec.last_name', upd.p_people_rec.last_name);
       logger.append_param(l_params, 'p_people_rec.email', upd.p_people_rec.email);
       logger.append_param(l_params, 'p_people_rec.cellphone', upd.p_people_rec.cellphone);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   people
             SET person_id = NVL(p_people_rec.person_id,person_id),
                name = NVL(p_people_rec.name,name),
                last_name = NVL(p_people_rec.last_name,last_name),
                email = NVL(p_people_rec.email,email),
                cellphone = NVL(p_people_rec.cellphone,cellphone)
           WHERE
                person_id = upd.p_people_rec.person_id
                ;
       ELSE
          UPDATE   people
             SET person_id = p_people_rec.person_id,
                name = p_people_rec.name,
                last_name = p_people_rec.last_name,
                email = p_people_rec.email,
                cellphone = p_people_rec.cellphone
           WHERE
                person_id = upd.p_people_rec.person_id
                ;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;
       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
       WHEN OTHERS
       THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
    END upd;


    PROCEDURE upd_rowid (
                         p_people_rec         IN people_rt,
                         p_ignore_nulls         IN boolean := FALSE
                        )
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'upd_rowid';
      l_params logger.tab_param;
    BEGIN
       logger.append_param(l_params, 'p_people_rec.person_id', upd_rowid.p_people_rec.person_id);
       logger.append_param(l_params, 'p_people_rec.name', upd_rowid.p_people_rec.name);
       logger.append_param(l_params, 'p_people_rec.last_name', upd_rowid.p_people_rec.last_name);
       logger.append_param(l_params, 'p_people_rec.email', upd_rowid.p_people_rec.email);
       logger.append_param(l_params, 'p_people_rec.cellphone', upd_rowid.p_people_rec.cellphone);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   people
             SET person_id = NVL(p_people_rec.person_id,person_id),
                name = NVL(p_people_rec.name,name),
                last_name = NVL(p_people_rec.last_name,last_name),
                email = NVL(p_people_rec.email,email),
                cellphone = NVL(p_people_rec.cellphone,cellphone)
           WHERE  ROWID = p_people_rec.row_id;
       ELSE
          UPDATE   people
             SET person_id = p_people_rec.person_id,
                name = p_people_rec.name,
                last_name = p_people_rec.last_name,
                email = p_people_rec.email,
                cellphone = p_people_rec.cellphone
           WHERE  ROWID = p_people_rec.row_id;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;
       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
       WHEN OTHERS
       THEN
          logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
          RAISE;
    END upd_rowid;

   PROCEDURE web_upd (
                  p_people_rec         IN people_rt,
                  p_ignore_nulls         IN boolean := FALSE
                )
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_upd';
      l_params logger.tab_param;
      l_people_rec people_rt;
   BEGIN
       logger.append_param(l_params, 'p_people_rec.person_id', web_upd.p_people_rec.person_id);
       logger.append_param(l_params, 'p_people_rec.name', web_upd.p_people_rec.name);
       logger.append_param(l_params, 'p_people_rec.last_name', web_upd.p_people_rec.last_name);
       logger.append_param(l_params, 'p_people_rec.email', web_upd.p_people_rec.email);
       logger.append_param(l_params, 'p_people_rec.cellphone', web_upd.p_people_rec.cellphone);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

      OPEN people_cur(
                             web_upd.p_people_rec.person_id
                        );

      FETCH people_cur INTO l_people_rec;

      IF people_cur%NOTFOUND THEN
         CLOSE people_cur;
         RAISE e_row_missing;
      ELSE
         IF p_people_rec.hash != l_people_rec.hash THEN
            CLOSE people_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN

                UPDATE   people
                   SET person_id = NVL(p_people_rec.person_id,person_id),
                       name = NVL(p_people_rec.name,name),
                       last_name = NVL(p_people_rec.last_name,last_name),
                       email = NVL(p_people_rec.email,email),
                       cellphone = NVL(p_people_rec.cellphone,cellphone)
               WHERE CURRENT OF people_cur;
            ELSE
                UPDATE   people
                   SET person_id = p_people_rec.person_id,
                       name = p_people_rec.name,
                       last_name = p_people_rec.last_name,
                       email = p_people_rec.email,
                       cellphone = p_people_rec.cellphone
               WHERE CURRENT OF people_cur;
            END IF;

            CLOSE people_cur;
         END IF;
      END IF;

      logger.LOG('END', l_scope);

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_upd;

   PROCEDURE web_upd_rowid (
                            p_people_rec    IN people_rt,
                            p_ignore_nulls         IN boolean := FALSE
                           )
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_upd_rowid';
      l_params logger.tab_param;
      l_people_rec people_rt;
   BEGIN
       logger.append_param(l_params, 'p_people_rec.person_id', web_upd_rowid.p_people_rec.person_id);
       logger.append_param(l_params, 'p_people_rec.name', web_upd_rowid.p_people_rec.name);
       logger.append_param(l_params, 'p_people_rec.last_name', web_upd_rowid.p_people_rec.last_name);
       logger.append_param(l_params, 'p_people_rec.email', web_upd_rowid.p_people_rec.email);
       logger.append_param(l_params, 'p_people_rec.cellphone', web_upd_rowid.p_people_rec.cellphone);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

      OPEN people_rowid_cur(web_upd_rowid.p_people_rec.row_id);

      FETCH people_rowid_cur INTO l_people_rec;

      IF people_rowid_cur%NOTFOUND THEN
         CLOSE people_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_upd_rowid.p_people_rec.hash != l_people_rec.hash THEN
            CLOSE people_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(web_upd_rowid.p_ignore_nulls, FALSE)
            THEN
                UPDATE   people
                   SET person_id = NVL(p_people_rec.person_id,person_id),
                       name = NVL(p_people_rec.name,name),
                       last_name = NVL(p_people_rec.last_name,last_name),
                       email = NVL(p_people_rec.email,email),
                       cellphone = NVL(p_people_rec.cellphone,cellphone)
               WHERE CURRENT OF people_rowid_cur;
            ELSE
                UPDATE   people
                   SET person_id = p_people_rec.person_id,
                       name = p_people_rec.name,
                       last_name = p_people_rec.last_name,
                       email = p_people_rec.email,
                       cellphone = p_people_rec.cellphone
               WHERE CURRENT OF people_rowid_cur;
            END IF;

            CLOSE people_rowid_cur;
         END IF;
      END IF;

      logger.LOG('END', l_scope);

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_upd_rowid;

    PROCEDURE del (
                  p_person_id IN people.person_id%TYPE
                  )
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'del';
      l_params logger.tab_param;
    BEGIN
      logger.append_param(l_params, 'p_person_id', del.p_person_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Deleting record', l_scope);

       DELETE FROM   people
             WHERE
                  person_id = del.p_person_id
                   ;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;

       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
       WHEN OTHERS
       THEN
          logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
          RAISE;
    END del;

    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'del_rowid';
      l_params logger.tab_param;
    BEGIN
       logger.append_param(l_params, 'p_rowid', del_rowid.p_rowid);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Deleting record', l_scope);

       DELETE FROM   people
             WHERE   ROWID = del_rowid.p_rowid;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;

       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
       WHEN OTHERS
       THEN
          logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
          RAISE;
    END del_rowid;

    PROCEDURE web_del (
                      p_person_id IN people.person_id%TYPE,
                      p_hash IN varchar2
                      )
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_del';
      l_params logger.tab_param;
      l_people_rec people_rt;
   BEGIN

      logger.append_param(l_params, 'p_person_id', web_del.p_person_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Deleting record', l_scope);

      OPEN people_cur(
                            web_del.p_person_id
                            );

      FETCH people_cur INTO l_people_rec;

      IF people_cur%NOTFOUND THEN
         CLOSE people_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del.p_hash != l_people_rec.hash THEN
            CLOSE people_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM people
            WHERE CURRENT OF people_cur;

            CLOSE people_cur;
         END IF;
      END IF;


      logger.LOG('END', l_scope);

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_del_rowid';
      l_params logger.tab_param;
      l_people_rec people_rt;
   BEGIN

      logger.append_param(l_params, 'p_rowid', web_del_rowid.p_rowid);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Deleting record', l_scope);

      OPEN people_rowid_cur(web_del_rowid.p_rowid);

      FETCH people_rowid_cur INTO l_people_rec;

      IF people_rowid_cur%NOTFOUND THEN
         CLOSE people_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_people_rec.hash THEN
            CLOSE people_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM people
            WHERE CURRENT OF people_rowid_cur;

            CLOSE people_rowid_cur;
         END IF;
      END IF;

      logger.LOG('END', l_scope);
   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_del_rowid;

END tapi_people;

 /
