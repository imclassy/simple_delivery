create or replace PACKAGE BODY tapi_users IS

   /**
   * TAPI_USERS
   * Generated by: tapiGen2 - DO NOT MODIFY!
   * Website: github.com/osalvador/tapiGen2
   * Created On: 20-JUL-2016 11:48
   * Created By: SIMPLE_DELIVERY
   */

    --Global logger scope
    gc_scope_prefix CONSTANT varchar2(31) := LOWER($$plsql_unit)||'.';

   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR users_cur (
                       p_user_id IN users.user_id%TYPE
                       )
   IS
      SELECT
            user_id,
            password,
            creation_date,
            person_id,
            state_id,
            tapi_users.hash(user_id),
            ROWID
      FROM users
      WHERE
           user_id = users_cur.p_user_id
      FOR UPDATE;

    --By Rowid
    CURSOR users_rowid_cur (p_rowid IN VARCHAR2)
    IS
      SELECT
             user_id,
             password,
             creation_date,
             person_id,
             state_id,
             tapi_users.hash(user_id),
             ROWID
      FROM users
      WHERE ROWID = p_rowid
      FOR UPDATE;


    FUNCTION hash (
                  p_user_id IN users.user_id%TYPE
                  )
      RETURN varchar2
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'hash';
      l_params logger.tab_param;
      l_retval hash_t;
      l_string CLOB;
      l_date_format VARCHAR2(64);
   BEGIN

      logger.append_param(l_params, 'p_user_id', p_user_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Getting row data into one string', l_scope);

     --Get actual NLS_DATE_FORMAT
     SELECT   VALUE
       INTO   l_date_format
       FROM   v$nls_parameters
      WHERE   parameter = 'NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            user_id||
            password||
            creation_date||
            person_id||
            state_id
      INTO l_string
      FROM users
      WHERE
           user_id = hash.p_user_id
           ;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      logger.LOG('Converting into SHA1 hash', l_scope);
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);
      logger.LOG('END', l_scope);

      RETURN l_retval;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END hash;

    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'hash_rowid';
      l_params logger.tab_param;
      l_retval hash_t;
      l_string CLOB;
      l_date_format varchar2(64);
   BEGIN
      logger.append_param(l_params, 'p_rowid', p_rowid);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Getting row data into one string', l_scope);

      --Get actual NLS_DATE_FORMAT
      SELECT VALUE INTO l_date_format  FROM v$nls_parameters WHERE parameter ='NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            user_id||
            password||
            creation_date||
            person_id||
            state_id
      INTO l_string
      FROM users
      WHERE  ROWID = hash_rowid.p_rowid;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      logger.LOG('Converting into SHA1 hash', l_scope);
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      logger.LOG('END', l_scope);
      RETURN l_retval;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END hash_rowid;

   FUNCTION rt (
               p_user_id IN users.user_id%TYPE
               )
      RETURN users_rt
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'rt';
      l_params logger.tab_param;
      l_users_rec users_rt;
   BEGIN
      logger.append_param(l_params, 'p_user_id', p_user_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Populating record type from DB', l_scope);

      SELECT a.*,
             tapi_users.hash(user_id),
             rowid
      INTO l_users_rec
      FROM users a
      WHERE
           user_id = rt.p_user_id
           ;

      logger.LOG('END', l_scope);

      RETURN l_users_rec;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END rt;

   FUNCTION rt_for_update (
                          p_user_id IN users.user_id%TYPE
                          )
      RETURN users_rt
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'rt_for_update';
      l_params logger.tab_param;
      l_users_rec users_rt;
   BEGIN

      logger.append_param(l_params, 'p_user_id', p_user_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Populating record type from DB', l_scope);

      SELECT a.*,
             tapi_users.hash(user_id),
             rowid
      INTO l_users_rec
      FROM users a
      WHERE
           user_id = rt_for_update.p_user_id
      FOR UPDATE;

      logger.LOG('END', l_scope);

      RETURN l_users_rec;

   EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END rt_for_update;

    FUNCTION tt (
                p_user_id IN users.user_id%TYPE DEFAULT NULL
                )
       RETURN users_tt
       PIPELINED
    IS
       l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'tt';
       l_params logger.tab_param;
       l_users_rec   users_rt;
    BEGIN
      logger.append_param(l_params, 'p_user_id', tt.p_user_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Populating record type from DB', l_scope);

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   users a
                   WHERE
                        user_id = NVL(tt.p_user_id,user_id)
                        )
       LOOP
              l_users_rec.user_id := c1.user_id;
              l_users_rec.password := c1.password;
              l_users_rec.creation_date := c1.creation_date;
              l_users_rec.person_id := c1.person_id;
              l_users_rec.state_id := c1.state_id;
              l_users_rec.hash := tapi_users.hash( c1.user_id);
              l_users_rec.row_id := c1.ROWID;
              PIPE ROW (l_users_rec);
       END LOOP;

       logger.LOG('END', l_scope);

       RETURN;

    EXCEPTION
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
    END tt;


    PROCEDURE ins (p_users_rec IN OUT users_rt)
    IS
        l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'ins';
        l_params logger.tab_param;
        l_rowtype     users%ROWTYPE;

    BEGIN
        logger.append_param(l_params, 'p_users_rec.user_id', ins.p_users_rec.user_id);
        logger.append_param(l_params, 'p_users_rec.password', ins.p_users_rec.password);
        logger.append_param(l_params, 'p_users_rec.creation_date', ins.p_users_rec.creation_date);
        logger.append_param(l_params, 'p_users_rec.person_id', ins.p_users_rec.person_id);
        logger.append_param(l_params, 'p_users_rec.state_id', ins.p_users_rec.state_id);
        logger.LOG('START', l_scope, NULL, l_params);
        logger.LOG('Inserting data', l_scope);


        l_rowtype.user_id := ins.p_users_rec.user_id;
        l_rowtype.password := ins.p_users_rec.password;
        l_rowtype.creation_date := ins.p_users_rec.creation_date;
        l_rowtype.person_id := ins.p_users_rec.person_id;
        l_rowtype.state_id := ins.p_users_rec.state_id;

       INSERT INTO users
         VALUES   l_rowtype;

       logger.LOG('END', l_scope);

    EXCEPTION
      WHEN OTHERS
      THEN
         logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
         RAISE;
    END ins;

    PROCEDURE upd (
                  p_users_rec         IN users_rt,
                  p_ignore_nulls         IN boolean := FALSE
                  )
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'upd';
      l_params logger.tab_param;
    BEGIN
       logger.append_param(l_params, 'p_users_rec.user_id', upd.p_users_rec.user_id);
       logger.append_param(l_params, 'p_users_rec.password', upd.p_users_rec.password);
       logger.append_param(l_params, 'p_users_rec.creation_date', upd.p_users_rec.creation_date);
       logger.append_param(l_params, 'p_users_rec.person_id', upd.p_users_rec.person_id);
       logger.append_param(l_params, 'p_users_rec.state_id', upd.p_users_rec.state_id);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   users
             SET user_id = NVL(p_users_rec.user_id,user_id),
                password = NVL(p_users_rec.password,password),
                creation_date = NVL(p_users_rec.creation_date,creation_date),
                person_id = NVL(p_users_rec.person_id,person_id),
                state_id = NVL(p_users_rec.state_id,state_id)
           WHERE
                user_id = upd.p_users_rec.user_id
                ;
       ELSE
          UPDATE   users
             SET user_id = p_users_rec.user_id,
                password = p_users_rec.password,
                creation_date = p_users_rec.creation_date,
                person_id = p_users_rec.person_id,
                state_id = p_users_rec.state_id
           WHERE
                user_id = upd.p_users_rec.user_id
                ;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;
       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
       WHEN OTHERS
       THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
    END upd;


    PROCEDURE upd_rowid (
                         p_users_rec         IN users_rt,
                         p_ignore_nulls         IN boolean := FALSE
                        )
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'upd_rowid';
      l_params logger.tab_param;
    BEGIN
       logger.append_param(l_params, 'p_users_rec.user_id', upd_rowid.p_users_rec.user_id);
       logger.append_param(l_params, 'p_users_rec.password', upd_rowid.p_users_rec.password);
       logger.append_param(l_params, 'p_users_rec.creation_date', upd_rowid.p_users_rec.creation_date);
       logger.append_param(l_params, 'p_users_rec.person_id', upd_rowid.p_users_rec.person_id);
       logger.append_param(l_params, 'p_users_rec.state_id', upd_rowid.p_users_rec.state_id);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   users
             SET user_id = NVL(p_users_rec.user_id,user_id),
                password = NVL(p_users_rec.password,password),
                creation_date = NVL(p_users_rec.creation_date,creation_date),
                person_id = NVL(p_users_rec.person_id,person_id),
                state_id = NVL(p_users_rec.state_id,state_id)
           WHERE  ROWID = p_users_rec.row_id;
       ELSE
          UPDATE   users
             SET user_id = p_users_rec.user_id,
                password = p_users_rec.password,
                creation_date = p_users_rec.creation_date,
                person_id = p_users_rec.person_id,
                state_id = p_users_rec.state_id
           WHERE  ROWID = p_users_rec.row_id;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;
       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
       WHEN OTHERS
       THEN
          logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
          RAISE;
    END upd_rowid;

   PROCEDURE web_upd (
                  p_users_rec         IN users_rt,
                  p_ignore_nulls         IN boolean := FALSE
                )
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_upd';
      l_params logger.tab_param;
      l_users_rec users_rt;
   BEGIN
       logger.append_param(l_params, 'p_users_rec.user_id', web_upd.p_users_rec.user_id);
       logger.append_param(l_params, 'p_users_rec.password', web_upd.p_users_rec.password);
       logger.append_param(l_params, 'p_users_rec.creation_date', web_upd.p_users_rec.creation_date);
       logger.append_param(l_params, 'p_users_rec.person_id', web_upd.p_users_rec.person_id);
       logger.append_param(l_params, 'p_users_rec.state_id', web_upd.p_users_rec.state_id);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

      OPEN users_cur(
                             web_upd.p_users_rec.user_id
                        );

      FETCH users_cur INTO l_users_rec;

      IF users_cur%NOTFOUND THEN
         CLOSE users_cur;
         RAISE e_row_missing;
      ELSE
         IF p_users_rec.hash != l_users_rec.hash THEN
            CLOSE users_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN

                UPDATE   users
                   SET user_id = NVL(p_users_rec.user_id,user_id),
                       password = NVL(p_users_rec.password,password),
                       creation_date = NVL(p_users_rec.creation_date,creation_date),
                       person_id = NVL(p_users_rec.person_id,person_id),
                       state_id = NVL(p_users_rec.state_id,state_id)
               WHERE CURRENT OF users_cur;
            ELSE
                UPDATE   users
                   SET user_id = p_users_rec.user_id,
                       password = p_users_rec.password,
                       creation_date = p_users_rec.creation_date,
                       person_id = p_users_rec.person_id,
                       state_id = p_users_rec.state_id
               WHERE CURRENT OF users_cur;
            END IF;

            CLOSE users_cur;
         END IF;
      END IF;

      logger.LOG('END', l_scope);

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_upd;

   PROCEDURE web_upd_rowid (
                            p_users_rec    IN users_rt,
                            p_ignore_nulls         IN boolean := FALSE
                           )
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_upd_rowid';
      l_params logger.tab_param;
      l_users_rec users_rt;
   BEGIN
       logger.append_param(l_params, 'p_users_rec.user_id', web_upd_rowid.p_users_rec.user_id);
       logger.append_param(l_params, 'p_users_rec.password', web_upd_rowid.p_users_rec.password);
       logger.append_param(l_params, 'p_users_rec.creation_date', web_upd_rowid.p_users_rec.creation_date);
       logger.append_param(l_params, 'p_users_rec.person_id', web_upd_rowid.p_users_rec.person_id);
       logger.append_param(l_params, 'p_users_rec.state_id', web_upd_rowid.p_users_rec.state_id);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Updating table', l_scope);

      OPEN users_rowid_cur(web_upd_rowid.p_users_rec.row_id);

      FETCH users_rowid_cur INTO l_users_rec;

      IF users_rowid_cur%NOTFOUND THEN
         CLOSE users_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_upd_rowid.p_users_rec.hash != l_users_rec.hash THEN
            CLOSE users_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(web_upd_rowid.p_ignore_nulls, FALSE)
            THEN
                UPDATE   users
                   SET user_id = NVL(p_users_rec.user_id,user_id),
                       password = NVL(p_users_rec.password,password),
                       creation_date = NVL(p_users_rec.creation_date,creation_date),
                       person_id = NVL(p_users_rec.person_id,person_id),
                       state_id = NVL(p_users_rec.state_id,state_id)
               WHERE CURRENT OF users_rowid_cur;
            ELSE
                UPDATE   users
                   SET user_id = p_users_rec.user_id,
                       password = p_users_rec.password,
                       creation_date = p_users_rec.creation_date,
                       person_id = p_users_rec.person_id,
                       state_id = p_users_rec.state_id
               WHERE CURRENT OF users_rowid_cur;
            END IF;

            CLOSE users_rowid_cur;
         END IF;
      END IF;

      logger.LOG('END', l_scope);

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_upd_rowid;

    PROCEDURE del (
                  p_user_id IN users.user_id%TYPE
                  )
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'del';
      l_params logger.tab_param;
    BEGIN
      logger.append_param(l_params, 'p_user_id', del.p_user_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Deleting record', l_scope);

       DELETE FROM   users
             WHERE
                  user_id = del.p_user_id
                   ;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;

       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
       WHEN OTHERS
       THEN
          logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
          RAISE;
    END del;

    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'del_rowid';
      l_params logger.tab_param;
    BEGIN
       logger.append_param(l_params, 'p_rowid', del_rowid.p_rowid);
       logger.LOG('START', l_scope, NULL, l_params);
       logger.LOG('Deleting record', l_scope);

       DELETE FROM   users
             WHERE   ROWID = del_rowid.p_rowid;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;

       logger.LOG('END', l_scope);

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
       WHEN OTHERS
       THEN
          logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
          RAISE;
    END del_rowid;

    PROCEDURE web_del (
                      p_user_id IN users.user_id%TYPE,
                      p_hash IN varchar2
                      )
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_del';
      l_params logger.tab_param;
      l_users_rec users_rt;
   BEGIN

      logger.append_param(l_params, 'p_user_id', web_del.p_user_id);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Deleting record', l_scope);

      OPEN users_cur(
                            web_del.p_user_id
                            );

      FETCH users_cur INTO l_users_rec;

      IF users_cur%NOTFOUND THEN
         CLOSE users_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del.p_hash != l_users_rec.hash THEN
            CLOSE users_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM users
            WHERE CURRENT OF users_cur;

            CLOSE users_cur;
         END IF;
      END IF;


      logger.LOG('END', l_scope);

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      l_scope logger_logs.scope%TYPE := gc_scope_prefix || 'web_del_rowid';
      l_params logger.tab_param;
      l_users_rec users_rt;
   BEGIN

      logger.append_param(l_params, 'p_rowid', web_del_rowid.p_rowid);
      logger.LOG('START', l_scope, NULL, l_params);
      logger.LOG('Deleting record', l_scope);

      OPEN users_rowid_cur(web_del_rowid.p_rowid);

      FETCH users_rowid_cur INTO l_users_rec;

      IF users_rowid_cur%NOTFOUND THEN
         CLOSE users_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_users_rec.hash THEN
            CLOSE users_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM users
            WHERE CURRENT OF users_rowid_cur;

            CLOSE users_rowid_cur;
         END IF;
      END IF;

      logger.LOG('END', l_scope);
   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
     WHEN OTHERS
     THEN
        logger.log_error('Unhandled Exception', l_scope, NULL, l_params);
        RAISE;
   END web_del_rowid;

END tapi_users;

 /
